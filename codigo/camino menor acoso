class vertice:
    def __init__(self, coordenadas, name):
        self.name = name
        self.coordenadas = coordenadas
        self.distancia = float('inf')
        self.padre = None
        self.visitado = False
        self.vecinos = []
        
    def agregarVecinos(self, v, p):
        if v not in self.vecinos:
            self.vecinos.append([v, p])
            
class Grafo:
    def __init__(self):
        self.vertices = {}
        
    def camino(self, a, b):
        camino = []
        actual = b
        while actual != None:
            camino.insert(0, self.vertices[actual].name)
            actual = self.vertices[actual].padre
        return [camino, self.vertices[b].distancia]
        
            
    def agregarArista(self, a, b, p):
        if a in self.vertices and b in self.vertices:
            self.vertices[a].agregarVecinos(b, p)
            self.vertices[b].agregarVecinos(a, p)
            
    def imprimirGrafo(self):
        for v in self.vertices:
            print("La distancia del vertice " + str(self.vertices[v].name) + " es " + str(self.vertices[v].distancia) + " llegando desde " + str(self.vertices[v].padre))
    
    
    def minimo(self, lista):
        if len(lista) > 0:
            m = self.vertices[lista[0]].distancia
            v = lista[0]
            for e in lista:
                if m > self.vertices[e].distancia:
                    m = self.vertices[e].distancia
                    v = e
            return v
    
    def dijkstra(self, a):
        if a in self.vertices:
            self.vertices[a].distancia = 0
            actual = a
            noVisitados = []
            for v in self.vertices:
                if v != a:
                    self.vertices[v].distancia = float('inf')
                self.vertices[v].padre = None
                noVisitados.append(v)
                
            while len(noVisitados) > 0:
                for vecino in self.vertices[actual].vecinos:
                    if self.vertices[vecino[0]].visitado == False:
                        if self.vertices[actual].distancia + float(vecino[1]) < self.vertices[vecino[0]].distancia:
                            self.vertices[vecino[0]].distancia = self.vertices[actual].distancia + vecino[1]
                            self.vertices[vecino[0]].padre = actual
                            
                self.vertices[actual].visitado = True
                noVisitados.remove(actual)
                
                actual = self.minimo(noVisitados)
        else:
            return False
        
    def agregarVertices(self, coordenadas, name):
        if coordenadas not in self.vertices:
            self.vertices[coordenadas] = vertice(coordenadas, name)
           
  
        
def main():
    grafo = Grafo()
    with open("calles_de_medellin_con_acoso.csv") as archivo:
      lines = archivo.readlines( )
      array = []
    for i in lines:
      array.append(i.split(";"))
    
    for i in range(0, 68749):
        grafo.agregarVertices(array[i][1], array[i][0])
        
    for i in range(0, 68748):
        if array[i][0] == '"Calle 60' and array[i][1] == 'Miranda"':
            
            if array[i+1][0] == '"Calle 60' and array[i+1][1] == 'Miranda"':
                
                grafo.agregarArista(array[i][2], array[i+1][2], float(array[i][6]))
            else:
                grafo.agregarArista(array[i][2], array[i+1][1], float(array[i][6]))
                
        elif array[i+1][0] == '"Calle 60' and array[i+1][1] == 'Miranda"':
            
            grafo.agregarArista(array[i][1], array[i+1][2], float(array[i][5]))
        elif array[i][5] == '':
            grafo.agregarArista(array[i][1], array[i+1][1], float(0))
        else:
            grafo.agregarArista(array[i][1], array[i+1][1], float(array[i][5]))
            
    grafo.agregarArista(array[68748][1], array[68748][1], float(0))
    
    print("Ingrese las Coordenadas de inicio con parentesis")
    
    inicio = input()
    
    print("Ingrese las Coordenadas de parada con parentesis")
    
    final = input()
    
    
    print("La ruta con menor acoso y su acoso es:")
    
    grafo.dijkstra(inicio)
    
    print(grafo.camino(inicio, final))
    
    
    
main()
